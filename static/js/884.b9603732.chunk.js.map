{"version":3,"file":"static/js/884.b9603732.chunk.js","mappings":"+OA4EA,UAtEqB,WAAO,IAAD,IACnBA,GAAWC,EAAAA,EAAAA,MACXC,GAAsBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,WACnDC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,MACAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAQN,GACLO,MAAK,SAAAJ,GAAI,OAAIC,EAAQD,EAAZ,IACTK,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAMG,QAAtB,GACf,GAAE,CAACZ,IACJ,MASIG,GAAQ,CAAC,EARXU,EADF,EACEA,eACAC,EAFF,EAEEA,MACAC,EAHF,EAGEA,SACAC,EAJF,EAIEA,YACAC,EALF,EAKEA,aACAC,EANF,EAMEA,WACAC,EAPF,EAOEA,QACAC,EARF,EAQEA,OAEF,OACE,4BACE,SAACC,EAAD,CAAYC,GAAI1B,EAAoB2B,QAApC,kBACCpB,IACC,4BACE,iBAAKqB,MAAO,CAAEC,QAAS,OAAQC,IAAK,QAApC,WACE,SAAC,KAAD,CACEC,IAAG,yCAAoCX,GACvCY,IAAKd,GAASD,EACdgB,MAAM,SAER,4BACE,wBAAKf,GAASD,KACd,0BACE,mCACCI,MAEH,0BACE,kCACCC,MAEH,0BACE,qCACCC,EAFH,UAIA,SAACW,EAAD,UACGV,EAAOW,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACV,SAACC,EAAD,UAAsBD,GAALD,EADP,OAId,uBAAIjB,KACJ,UAACe,EAAD,YACE,yBACE,SAACT,EAAD,CAAYC,GAAG,OAAf,qBAEF,yBACE,SAACD,EAAD,CAAYC,GAAG,UAAf,iCAKR,SAAC,EAAAa,SAAD,CAAUC,UAAU,uCAApB,UACE,SAAC,KAAD,WAMX,EAID,IAAMN,EAAaO,EAAAA,QAAAA,GAAH,2EAMVH,EAAaG,EAAAA,QAAAA,GAAH,8JASVhB,GAAagB,EAAAA,EAAAA,SAAOC,EAAAA,GAAPD,CAAH,0L","sources":["pages/MovieDetails.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { ImgStyled } from 'components';\nimport { Suspense, useEffect, useRef, useState } from 'react';\nimport { NavLink, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { getFilm } from 'services';\n\nconst MovieDetails = () => {\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/movies');\n  const { movieId } = useParams();\n  const [film, setFilm] = useState(null);\n  useEffect(() => {\n    getFilm(movieId)\n      .then(film => setFilm(film))\n      .catch(error => console.log(error.message));\n  }, [movieId]);\n  const {\n    original_title,\n    title,\n    overview,\n    poster_path,\n    vote_average,\n    vote_count,\n    runtime,\n    genres,\n  } = film || {};\n  return (\n    <div>\n      <StyledLink to={backLinkLocationRef.current}>back</StyledLink>\n      {film && (\n        <div>\n          <div style={{ display: 'flex', gap: '16px' }}>\n            <ImgStyled\n              src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n              alt={title || original_title}\n              width=\"360\"\n            />\n            <div>\n              <h2>{title || original_title}</h2>\n              <p>\n                <b>Rating:</b>\n                {vote_average}\n              </p>\n              <p>\n                <b>Votes:</b>\n                {vote_count}\n              </p>\n              <p>\n                <b>Run Time:</b>\n                {runtime}min\n              </p>\n              <StyledList>\n                {genres.map(({ id, name }) => (\n                  <StyledItem key={id}>{name}</StyledItem>\n                ))}\n              </StyledList>\n              <p>{overview}</p>\n              <StyledList>\n                <li>\n                  <StyledLink to=\"cast\">Cast</StyledLink>\n                </li>\n                <li>\n                  <StyledLink to=\"reviews\">Reviews</StyledLink>\n                </li>\n              </StyledList>\n            </div>\n          </div>\n          <Suspense fallback={<h2>Loading...</h2>}>\n            <Outlet />\n          </Suspense>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MovieDetails;\n\nconst StyledList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 4px;\n`;\n\nconst StyledItem = styled.li`\n  display: block;\n  border-radius: 4px;\n  border: 1px solid lightgray;\n  padding: 4px 8px;\n  line-height: 1;\n  font-size: 18px;\n`;\n\nconst StyledLink = styled(NavLink)`\n  display: inline-block;\n  border-radius: 4px;\n  border: 1px solid lightgray;\n  padding: 5px 10px;\n  line-height: 1;\n  font-size: 18px;\n  font-weight: 600;\n`;\n"],"names":["location","useLocation","backLinkLocationRef","useRef","state","from","movieId","useParams","useState","film","setFilm","useEffect","getFilm","then","catch","error","console","log","message","original_title","title","overview","poster_path","vote_average","vote_count","runtime","genres","StyledLink","to","current","style","display","gap","src","alt","width","StyledList","map","id","name","StyledItem","Suspense","fallback","styled","NavLink"],"sourceRoot":""}